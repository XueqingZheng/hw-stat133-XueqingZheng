team_salaries <- arrange(team_salaries, desc(total_salary))
#as_tibble(team_salaries)
#b) Because team_salaries is a tibble object, when you try to print it, only the first 10 rows are displayed. In order to display the entire table, run the following command:
as.data.frame(team_salaries)
avg_salary =  sum(team_salaries$total_salary) / length(team_salaries$team)
avg_salary
#c) Use "ggplot2" functions to create a horizontal barchart of the total salary by team, in decreasing order (see conceptual sketch below). Include axis labels, and a title.
ggplot(data = team_salaries, aes(x = team, y = total_salary)) + geom_bar(stat = "identity") + coord_flip() + labs( x = "Team", y = "Total Salary(in millions)",
title ="NBA Teams Ranked by Total Salary") + theme_classic() + geom_hline(yintercept = avg_salary, color = "red", size=1.5)
library(dplyr)
library(ggplot2)
#a) Use "dplyr" functions to create a data tibble named team_salaries containing columns for team, total_salary, mean_salary, and median_salary.
team_salaries <- summarise(
group_by(dat, team),
total_salary = sum(salary) / 1000000,
mean_salary = mean(salary) / 1000000,
median_salary = median(salary) / 1000000
)
team_salaries <- arrange(team_salaries, desc(total_salary))
team_salaries
#as_tibble(team_salaries)
#b) Because team_salaries is a tibble object, when you try to print it, only the first 10 rows are displayed. In order to display the entire table, run the following command:
as.data.frame(team_salaries)
avg_salary =  sum(team_salaries$total_salary) / length(team_salaries$team)
avg_salary
#c) Use "ggplot2" functions to create a horizontal barchart of the total salary by team, in decreasing order (see conceptual sketch below). Include axis labels, and a title.
ggplot(data = team_salaries, aes(x = team, y = total_salary)) + geom_bar(stat = "identity") + coord_flip() + labs( x = "Team", y = "Total Salary(in millions)",
title ="NBA Teams Ranked by Total Salary") + theme_classic() + geom_hline(yintercept = avg_salary, color = "red", size=1.5)
#a) Use "dplyr" functions to create a data tibble named team_points containing columns for team, total_points, mean_points, and median_points. Arrange this table by total_points in descending order.
team_points <- summarise(
group_by(dat, team),
total_points = sum(points) / 1000000,
mean_points = mean(points) / 1000000,
median_points = median(points) / 1000000
)
team_points <- arrange(team_points, desc(total_points))
as_tibble(team_points)
#b) Because team_salaries is a tibble object, when you try to print it, only the first 10 rows are displayed. In order to display the entire table, run the following command:
as.data.frame(team_points)
avg_points =  sum(team_points$total_points) / length(team_points$team)
avg_points
#c) Use "ggplot2" functions to create a horizontal barchart of the total salary by team, in decreasing order (see conceptual sketch below). Include axis labels, and a title.
ggplot(data = team_points, aes(x = team, y = total_points)) + geom_bar(stat = "identity") + coord_flip() + labs( x = "Team", y = "Total Scored Points",
title ="NBA Teams Ranked by Total Scored Points") + theme_classic() + geom_hline(yintercept = avg_points, color = "red", size=1.5)
#a) Use "dplyr" functions to create a data tibble named team_points containing columns for team, total_points, mean_points, and median_points. Arrange this table by total_points in descending order.
team_points <- summarise(
group_by(dat, team),
total_points = sum(points) ,
mean_points = mean(points) ,
median_points = median(points)
)
team_points <- arrange(team_points, desc(total_points))
as_tibble(team_points)
#b) Because team_salaries is a tibble object, when you try to print it, only the first 10 rows are displayed. In order to display the entire table, run the following command:
as.data.frame(team_points)
avg_points =  sum(team_points$total_points) / length(team_points$team)
avg_points
#c) Use "ggplot2" functions to create a horizontal barchart of the total salary by team, in decreasing order (see conceptual sketch below). Include axis labels, and a title.
ggplot(data = team_points, aes(x = team, y = total_points)) + geom_bar(stat = "identity") + coord_flip() + labs( x = "Team", y = "Total Scored Points",
title ="NBA Teams Ranked by Total Scored Points") + theme_classic() + geom_hline(yintercept = avg_points, color = "red", size=1.5)
library(dplyr)
library(ggplot2)
#a) Use "dplyr" functions to create a data tibble named team_salaries containing columns for team, total_salary, mean_salary, and median_salary.
team_salaries <- summarise(
group_by(dat, team),
total_salary = sum(salary) / 1000000,
mean_salary = mean(salary) / 1000000,
median_salary = median(salary) / 1000000
)
team_salaries <- arrange(team_salaries, desc(total_salary))
team_salaries
#b) Because team_salaries is a tibble object, when you try to print it, only the first 10 rows are displayed. In order to display the entire table, run the following command:
as.data.frame(team_salaries)
avg_salary =  sum(team_salaries$total_salary) / length(team_salaries$team)
#c) Use "ggplot2" functions to create a horizontal barchart of the total salary by team, in decreasing order (see conceptual sketch below). Include axis labels, and a title.
ggplot(data = team_salaries, aes(x = reoder(team, rep(1, length(team)), sum), y = total_salary)) + geom_bar(stat = "identity") + coord_flip() + labs( x = "Team", y = "Total Salary(in millions)",
title ="NBA Teams Ranked by Total Salary") + theme_classic() + geom_hline(yintercept = avg_salary, color = "red", size=1.5)
library(dplyr)
library(ggplot2)
#a) Use "dplyr" functions to create a data tibble named team_salaries containing columns for team, total_salary, mean_salary, and median_salary.
team_salaries <- summarise(
group_by(dat, team),
total_salary = sum(salary) / 1000000,
mean_salary = mean(salary) / 1000000,
median_salary = median(salary) / 1000000
)
team_salaries <- arrange(team_salaries, desc(total_salary))
team_salaries
#b) Because team_salaries is a tibble object, when you try to print it, only the first 10 rows are displayed. In order to display the entire table, run the following command:
as.data.frame(team_salaries)
avg_salary =  sum(team_salaries$total_salary) / length(team_salaries$team)
#c) Use "ggplot2" functions to create a horizontal barchart of the total salary by team, in decreasing order (see conceptual sketch below). Include axis labels, and a title.
ggplot(data = team_salaries, aes(x = reorder(team, rep(1, length(team)), sum), y = total_salary)) + geom_bar(stat = "identity") + coord_flip() + labs( x = "Team", y = "Total Salary(in millions)",
title ="NBA Teams Ranked by Total Salary") + theme_classic() + geom_hline(yintercept = avg_salary, color = "red", size=1.5)
library(dplyr)
library(ggplot2)
#a) Use "dplyr" functions to create a data tibble named team_salaries containing columns for team, total_salary, mean_salary, and median_salary.
team_salaries <- summarise(
group_by(dat, team),
total_salary = sum(salary) / 1000000,
mean_salary = mean(salary) / 1000000,
median_salary = median(salary) / 1000000
)
team_salaries <- arrange(team_salaries, desc(total_salary))
team_salaries
#b) Because team_salaries is a tibble object, when you try to print it, only the first 10 rows are displayed. In order to display the entire table, run the following command:
as.data.frame(team_salaries)
avg_salary =  sum(team_salaries$total_salary) / length(team_salaries$team)
#c) Use "ggplot2" functions to create a horizontal barchart of the total salary by team, in decreasing order (see conceptual sketch below). Include axis labels, and a title.
ggplot(data = team_salaries, aes(x = reorder(team, rep(1, length(team_salaries$team)), sum), y = total_salary)) + geom_bar(stat = "identity") + coord_flip() + labs( x = "Team", y = "Total Salary(in millions)",
title ="NBA Teams Ranked by Total Salary") + theme_classic() + geom_hline(yintercept = avg_salary, color = "red", size=1.5)
library(dplyr)
library(ggplot2)
#a) Use "dplyr" functions to create a data tibble named team_salaries containing columns for team, total_salary, mean_salary, and median_salary.
team_salaries <- summarise(
group_by(dat, team),
total_salary = sum(salary) / 1000000,
mean_salary = mean(salary) / 1000000,
median_salary = median(salary) / 1000000
)
team_salaries <- arrange(team_salaries, desc(total_salary))
team_salaries
#b) Because team_salaries is a tibble object, when you try to print it, only the first 10 rows are displayed. In order to display the entire table, run the following command:
as.data.frame(team_salaries)
avg_salary =  sum(team_salaries$total_salary) / length(team_salaries$team)
#c) Use "ggplot2" functions to create a horizontal barchart of the total salary by team, in decreasing order (see conceptual sketch below). Include axis labels, and a title.
ggplot(data = team_salaries, aes(x = team, y = total_salary, desc(total_salary) = TRUE)) + geom_bar(stat = "identity") + coord_flip() + labs( x = "Team", y = "Total Salary(in millions)",
library(dplyr)
library(ggplot2)
#a) Use "dplyr" functions to create a data tibble named team_salaries containing columns for team, total_salary, mean_salary, and median_salary.
team_salaries <- summarise(
group_by(dat, team),
total_salary = sum(salary) / 1000000,
mean_salary = mean(salary) / 1000000,
median_salary = median(salary) / 1000000
)
team_salaries <- arrange(team_salaries, desc(total_salary))
team_salaries
#b) Because team_salaries is a tibble object, when you try to print it, only the first 10 rows are displayed. In order to display the entire table, run the following command:
as.data.frame(team_salaries)
avg_salary =  sum(team_salaries$total_salary) / length(team_salaries$team)
#c) Use "ggplot2" functions to create a horizontal barchart of the total salary by team, in decreasing order (see conceptual sketch below). Include axis labels, and a title.
ggplot(data = team_salaries, aes(x = reorder(team, total_salary), y = total_salary) + geom_bar(stat = "identity") + coord_flip() + labs( x = "Team", y = "Total Salary(in millions)",
title ="NBA Teams Ranked by Total Salary") + theme_classic() + geom_hline(yintercept = avg_salary, color = "red", size=1.5)
library(dplyr)
library(ggplot2)
#a) Use "dplyr" functions to create a data tibble named team_salaries containing columns for team, total_salary, mean_salary, and median_salary.
team_salaries <- summarise(
group_by(dat, team),
total_salary = sum(salary) / 1000000,
mean_salary = mean(salary) / 1000000,
median_salary = median(salary) / 1000000
)
team_salaries <- arrange(team_salaries, desc(total_salary))
team_salaries
#b) Because team_salaries is a tibble object, when you try to print it, only the first 10 rows are displayed. In order to display the entire table, run the following command:
as.data.frame(team_salaries)
avg_salary =  sum(team_salaries$total_salary) / length(team_salaries$team)
#c) Use "ggplot2" functions to create a horizontal barchart of the total salary by team, in decreasing order (see conceptual sketch below). Include axis labels, and a title.
ggplot(data = team_salaries, aes(x = reorder(team, total_salary), y = total_salary)) + geom_bar(stat = "identity") + coord_flip() + labs( x = "Team", y = "Total Salary(in millions)",
title ="NBA Teams Ranked by Total Salary") + theme_classic() + geom_hline(yintercept = avg_salary, color = "red", size=1.5)
#a) Use "dplyr" functions to create a data tibble named team_points containing columns for team, total_points, mean_points, and median_points. Arrange this table by total_points in descending order.
team_points <- summarise(
group_by(dat, team),
total_points = sum(points) ,
mean_points = mean(points) ,
median_points = median(points)
)
team_points <- arrange(team_points, desc(total_points))
team_points
#b) Because team_salaries is a tibble object, when you try to print it, only the first 10 rows are displayed. In order to display the entire table, run the following command:
as.data.frame(team_points)
avg_points =  sum(team_points$total_points) / length(team_points$team)
#c) Use "ggplot2" functions to create a horizontal barchart of the total salary by team, in decreasing order (see conceptual sketch below). Include axis labels, and a title.
ggplot(data = team_points, aes(x = reorder(team, total_points), y = total_points)) + geom_bar(stat = "identity") + coord_flip() + labs( x = "Team", y = "Total Scored Points",
title ="NBA Teams Ranked by Total Scored Points") + theme_classic() + geom_hline(yintercept = avg_points, color = "red", size=1.5)
#a) Use "dplyr" functions to create a data tibble named team_points containing columns for team, total_points, mean_points, and median_points. Arrange this table by total_points in descending order.
team_points <- summarise(
group_by(dat, team),
total_points = sum(points) ,
mean_points = mean(points) ,
median_points = median(points)
)
team_points <- arrange(team_points, desc(total_points))
team_points
#b) Because team_salaries is a tibble object, when you try to print it, only the first 10 rows are displayed. In order to display the entire table, run the following command:
as.data.frame(team_points)
avg_points =  sum(team_points$total_points) / length(team_points$team)
#c) Use "ggplot2" functions to create a horizontal barchart of the total salary by team, in decreasing order (see conceptual sketch below). Include axis labels, and a title.
ggplot(data = team_points, aes(x = reorder(team, total_points), y = total_points)) + geom_bar(stat = "identity") + coord_flip() + labs( x = "Team", y = "Total Scored Points",
title ="NBA Teams Ranked by Total Scored Points") + theme_classic() + geom_hline(yintercept = avg_points, color = "red", size=1.5)
points_salary <- inner_join(team_points, team_salaries, by = team)
points_salary <- inner_join(team_points, team_salaries)
points_salary <- inner_join(team_points, team_salaries)
points_salary
summary(points_salary)
points_salary <- mutate(points_salary, S/P = total_salary / total_points)
points_salary <- mutate(points_salary, cost_points = total_salary / total_points)
points_salary
summary(points_salary$cost_points)
points_salary <- mutate(points_salary, cost_points = total_salary*1000000 / total_points)
summary(points_salary$cost_points)
summary(points_salary)
ggplot(data = points_salary, aes(x = reorder(team, cost_points), y = cost_points)) + geom_bar(stat = "identity") + coord_flip() + labs( x = "Team", y = "Cost Points",
title ="NBA Teams Ranked by Cost Points") + theme_classic() + geom_hline(yintercept = mean(cost_points, color = "red", size=1.5)
ggplot(data = points_salary, aes(x = reorder(team, cost_points), y = cost_points)) + geom_bar(stat = "identity") + coord_flip() + labs( x = "Team", y = "Cost Points",
title ="NBA Teams Ranked by Cost Points") + theme_classic() + geom_hline(yintercept = mean(cost_points)), color = "red", size=1.5)
ggplot(data = points_salary, aes(x = reorder(team, cost_points), y = cost_points)) + geom_bar(stat = "identity") + coord_flip() + labs( x = "Team", y = "Cost Points",
title ="NBA Teams Ranked by Cost Points") + theme_classic() + geom_hline(yintercept = mean(cost_points), color = "red", size=1.5)
ggplot(data = points_salary, aes(x = reorder(team, cost_points), y = cost_points)) + geom_bar(stat = "identity") + coord_flip() + labs( x = "Team", y = "Cost Points",
title ="NBA Teams Ranked by Cost Points") + theme_classic() + geom_hline(yintercept = mean(points_salary$cost_points), color = "red", size=1.5)
pwd
matrix(1:12, nrow = 4, ncol = 3, byrow = TRUE)
"-2">0
library(dplyr)
shots_data <- read.csv("../data/shots-data.csv")
library(dplyr)
shots_data <- read.csv("../data/shots-data.csv")
knitr::kable(twopt)
knitr::include_graphics('../images/gsw_shot_charts.png')
library(dplyr)
shots_data <- read.csv("../data/shots-data.csv")
#2PT Effective Shooting % by Player:
twopt <- shots_data %>%
filter(shot_type == "2PT Field Goal") %>%
#select(name, shot_made_flag) %>%
group_by(name) %>%
summarise(
total = sum(shot_type == "2PT Field Goal"),
made = sum(shot_made_flag == "shot_yes"),
perc_made = made / total
) %>%
arrange(desc(perc_made))
#3PT Effective Shooting % by Player
threept <- shots_data %>%
filter(shot_type == "3PT Field Goal") %>%
#select(name, shot_made_flag) %>%
group_by(name) %>%
summarise(
total = sum(shot_type == "3PT Field Goal"),
made = sum(shot_made_flag == "shot_yes"),
perc_made = made / total
) %>%
arrange(desc(perc_made))
#Effective Shooting % by Player:
eff_pt <- shots_data %>%
filter(shot_type == "3PT Field Goal" | shot_type == "2PT Field Goal") %>%
#select(name, shot_made_flag) %>%
group_by(name) %>%
summarise(
total = sum(shot_type == "3PT Field Goal" | shot_type == "2PT Field Goal"),
made = sum(shot_made_flag == "shot_yes"),
perc_made = made / total
) %>%
arrange(desc(perc_made))
knitr::kable(twopt)
knitr::kable(threept)
knitr::kable(eff_pt)
##################################################
## • title: The shots data of the NBA players
## • description: Making the shots data
## • input(s): (name).csv
## • output(s): (*-summary).csv
##################################################
library(dplyr)
iguodala <- read.csv("../data/andre-iguodala.csv", stringsAsFactors = FALSE)
green <- read.csv("../data/draymond-green.csv", stringsAsFactors = FALSE)
durant <- read.csv("../data/kevin-durant.csv", stringsAsFactors = FALSE)
thompson <- read.csv("../data/klay-thompson.csv", stringsAsFactors = FALSE)
curry <- read.csv("../data/stephen-curry.csv", stringsAsFactors = FALSE)
iguodala <- mutate(iguodala, name = "Andre Iguodala")
green<- mutate(green, name = "Draymond Green")
durant<- mutate(durant, name = "Kevin Durant")
thompson<- mutate(thompson, name = "Klay Thompson")
curry<- mutate(curry, name = "Stephen Curry")
iguodala$shot_made_flag[iguodala$shot_made_flag == 'n'] = "shot_no"
iguodala$shot_made_flag[iguodala$shot_made_flag == 'y'] = "shot_yes"
green$shot_made_flag[green$shot_made_flag == 'n'] = "shot_no"
green$shot_made_flag[green$shot_made_flag == 'y'] = "shot_yes"
durant$shot_made_flag[durant$shot_made_flag == 'n'] = "shot_no"
durant$shot_made_flag[durant$shot_made_flag == 'y'] = "shot_yes"
thompson$shot_made_flag[thompson$shot_made_flag == 'n'] = "shot_no"
thompson$shot_made_flag[thompson$shot_made_flag == 'y'] = "shot_yes"
curry$shot_made_flag[curry$shot_made_flag == 'n'] = "shot_no"
curry$shot_made_flag[curry$shot_made_flag == 'y'] = "shot_yes"
iguodala <- mutate(iguodala, minute = period * 12 - minutes_remaining)
green <- mutate(green, minute = period * 12 - minutes_remaining)
durant <- mutate(durant, minute = period * 12 - minutes_remaining)
thompson <- mutate(thompson, minute = period * 12 - minutes_remaining)
curry <- mutate(curry, minute = period * 12 - minutes_remaining)
sink(file = '../output/andre-iguodala-summary.txt')
summary(iguodala)
sink(file = '../output/draymond-green-summary.txt')
summary(green)
sink(file = '../output/kevin-durant-summary.txt')
summary(durant)
sink(file = '../output/klay-thompson-summary.txt')
summary(thompson)
sink(file = '../output/stephen-curry-summary.txt')
summary(curry)
assembled_table <- rbind(iguodala, green, durant, thompson, curry)
write.csv(
x = assembled_table,
file = '../data/shots-data.csv'
)
sink(file = '../output/shots-data-summary.txt')
summary(assembled_table)
kevin_shot_chart <- ggplot(data = durant) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart:Kevin Durant (2016 season)') +
theme_minimal()
##################################################
## • title: The shots data of the NBA players
## • description: Making the shots data
## • input(s): (name).csv
## • output(s): (*-summary).csv
##################################################
library(dplyr)
iguodala <- read.csv("../data/andre-iguodala.csv", stringsAsFactors = FALSE)
green <- read.csv("../data/draymond-green.csv", stringsAsFactors = FALSE)
durant <- read.csv("../data/kevin-durant.csv", stringsAsFactors = FALSE)
thompson <- read.csv("../data/klay-thompson.csv", stringsAsFactors = FALSE)
curry <- read.csv("../data/stephen-curry.csv", stringsAsFactors = FALSE)
iguodala <- mutate(iguodala, name = "Andre Iguodala")
green<- mutate(green, name = "Draymond Green")
durant<- mutate(durant, name = "Kevin Durant")
thompson<- mutate(thompson, name = "Klay Thompson")
curry<- mutate(curry, name = "Stephen Curry")
library(dplyr)
iguodala <- read.csv("../data/andre-iguodala.csv", stringsAsFactors = FALSE)
green <- read.csv("../data/draymond-green.csv", stringsAsFactors = FALSE)
durant <- read.csv("../data/kevin-durant.csv", stringsAsFactors = FALSE)
thompson <- read.csv("../data/klay-thompson.csv", stringsAsFactors = FALSE)
curry <- read.csv("../data/stephen-curry.csv", stringsAsFactors = FALSE)
setwd("C:/Users/89359/Desktop/STAT133/hw/workout01/code")
##################################################
## • title: The shots data of the NBA players
## • description: Making the shots data
## • input(s): (name).csv
## • output(s): (*-summary).csv
##################################################
library(dplyr)
iguodala <- read.csv("../data/andre-iguodala.csv", stringsAsFactors = FALSE)
green <- read.csv("../data/draymond-green.csv", stringsAsFactors = FALSE)
durant <- read.csv("../data/kevin-durant.csv", stringsAsFactors = FALSE)
thompson <- read.csv("../data/klay-thompson.csv", stringsAsFactors = FALSE)
curry <- read.csv("../data/stephen-curry.csv", stringsAsFactors = FALSE)
iguodala <- mutate(iguodala, name = "Andre Iguodala")
green<- mutate(green, name = "Draymond Green")
durant<- mutate(durant, name = "Kevin Durant")
thompson<- mutate(thompson, name = "Klay Thompson")
curry<- mutate(curry, name = "Stephen Curry")
iguodala$shot_made_flag[iguodala$shot_made_flag == 'n'] = "shot_no"
iguodala$shot_made_flag[iguodala$shot_made_flag == 'y'] = "shot_yes"
green$shot_made_flag[green$shot_made_flag == 'n'] = "shot_no"
green$shot_made_flag[green$shot_made_flag == 'y'] = "shot_yes"
durant$shot_made_flag[durant$shot_made_flag == 'n'] = "shot_no"
durant$shot_made_flag[durant$shot_made_flag == 'y'] = "shot_yes"
thompson$shot_made_flag[thompson$shot_made_flag == 'n'] = "shot_no"
thompson$shot_made_flag[thompson$shot_made_flag == 'y'] = "shot_yes"
curry$shot_made_flag[curry$shot_made_flag == 'n'] = "shot_no"
curry$shot_made_flag[curry$shot_made_flag == 'y'] = "shot_yes"
iguodala <- mutate(iguodala, minute = period * 12 - minutes_remaining)
green <- mutate(green, minute = period * 12 - minutes_remaining)
durant <- mutate(durant, minute = period * 12 - minutes_remaining)
thompson <- mutate(thompson, minute = period * 12 - minutes_remaining)
curry <- mutate(curry, minute = period * 12 - minutes_remaining)
sink(file = '../output/andre-iguodala-summary.txt')
summary(iguodala)
sink(file = '../output/draymond-green-summary.txt')
summary(green)
sink(file = '../output/kevin-durant-summary.txt')
summary(durant)
sink(file = '../output/klay-thompson-summary.txt')
summary(thompson)
sink(file = '../output/stephen-curry-summary.txt')
summary(curry)
assembled_table <- rbind(iguodala, green, durant, thompson, curry)
write.csv(
x = assembled_table,
file = '../data/shots-data.csv'
)
sink(file = '../output/shots-data-summary.txt')
summary(assembled_table)
##################################################
## • title: The shots charts of the NBA players
## • description: Making the shots charts
## • input(s): (name).csv
## • output(s): (*-shot-chart).pdf, (*-shot-chart).png
##################################################
library(jpeg)
library(grid)
library(ggplot2)
library(dplyr)
iguodala <- read.csv("../data/andre-iguodala.csv", stringsAsFactors = FALSE)
green <- read.csv("../data/draymond-green.csv", stringsAsFactors = FALSE)
durant <- read.csv("../data/kevin-durant.csv", stringsAsFactors = FALSE)
thompson <- read.csv("../data/klay-thompson.csv", stringsAsFactors = FALSE)
curry <- read.csv("../data/stephen-curry.csv", stringsAsFactors = FALSE)
assembled_table <- read.csv("../data/shots-data.csv",stringsAsFactors = FALSE)
as.factor(assembled_table$name)
court_file <- "../images/nba-court.jpg"
court_image <- rasterGrob(
readJPEG(court_file),
width = unit(1, "npc"),
height = unit(1, "npc"))
andre_shot_chart <- ggplot(data = iguodala) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart: Andre Iguodala (2016 season)') +
theme_minimal()
ggsave(
filename = "../images/andre-iguodala-shot-chart.pdf",
plot = andre_shot_chart, units = "in", width = 6.5, height = 5)
draymond_shot_chart <- ggplot(data = green) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart:Draymond Green (2016 season)') +
theme_minimal()
ggsave(
filename = "../images/draymond-green-shot-chart.pdf",
plot = draymond_shot_chart, units = "in", width = 6.5, height = 5)
kevin_shot_chart <- ggplot(data = durant) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart:Kevin Durant (2016 season)') +
theme_minimal()
ggsave(
filename = "../images/kevin-durant-green-shot-chart.pdf",
plot = kevin_shot_chart, units = "in", width = 6.5, height = 5)
klay_shot_chart <- ggplot(data = thompson) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart: Klay Thompson (2016 season)') +
theme_minimal()
ggsave(
filename = "../images/klay-thompson-shot-chart.pdf",
plot = klay_shot_chart, units = "in", width = 6.5, height = 5)
stephen_shot_chart <- ggplot(data = curry) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Chart:Stephen Curry (2016 season)') +
theme_minimal()
ggsave(
filename = "../images/stephen-curry-shot-chart.pdf",
plot = stephen_shot_chart, units = "in", width = 6.5, height = 5)
gsw_shot_charts <- ggplot(assembled_table) +
annotation_custom(court_image, -250, 250, -50, 420) +
geom_point(aes(x = x, y = y, color = shot_made_flag)) +
ylim(-50, 420) +
ggtitle('Shot Charts: GSW (2016 season)') +
facet_wrap(~ name) +
theme_minimal() +
theme(legend.position="top")
ggsave(
filename = "../images/gsw_shot_charts.pdf",
plot = gsw_shot_charts, units = "in", width = 8, height = 7)
ggsave(
filename = "../images/gsw_shot_charts.png",
plot = gsw_shot_charts, units = "in", width = 8, height = 7)
knitr::include_graphics('../images/gsw_shot_charts.png')
library(dplyr)
shots_data <- read.csv("../data/shots-data.csv")
#2PT Effective Shooting % by Player:
twopt <- shots_data %>%
filter(shot_type == "2PT Field Goal") %>%
#select(name, shot_made_flag) %>%
group_by(name) %>%
summarise(
total = sum(shot_type == "2PT Field Goal"),
made = sum(shot_made_flag == "shot_yes"),
perc_made = made / total
) %>%
arrange(desc(perc_made))
#3PT Effective Shooting % by Player
threept <- shots_data %>%
filter(shot_type == "3PT Field Goal") %>%
#select(name, shot_made_flag) %>%
group_by(name) %>%
summarise(
total = sum(shot_type == "3PT Field Goal"),
made = sum(shot_made_flag == "shot_yes"),
perc_made = made / total
) %>%
arrange(desc(perc_made))
#Effective Shooting % by Player:
eff_pt <- shots_data %>%
filter(shot_type == "3PT Field Goal" | shot_type == "2PT Field Goal") %>%
#select(name, shot_made_flag) %>%
group_by(name) %>%
summarise(
total = sum(shot_type == "3PT Field Goal" | shot_type == "2PT Field Goal"),
made = sum(shot_made_flag == "shot_yes"),
perc_made = made / total
) %>%
arrange(desc(perc_made))
knitr::kable(twopt)
knitr::kable(threept)
knitr::kable(eff_pt)
library(dplyr)
shots_data <- read.csv("../data/shots-data.csv")
example_ <- shots_data[1:10, ]
knitr::kable(example_)
knitr::kable(twopt)
knitr::include_graphics('../images/gsw_shot_charts.png')
